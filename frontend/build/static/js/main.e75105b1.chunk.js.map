{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","w","m","borderRadius","borderWidth","box-shadow","bg","Text","fontSize","fontFamily","fontWeight","letterSpacing","color","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.e75105b1.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","// import {\n//   Box,\n//   Container,\n//   Tab,\n//   TabList,\n//   TabPanel,\n//   TabPanels,\n//   Tabs,\n//   Text,\n// } from \"@chakra-ui/react\";\n// import { useEffect } from \"react\";\n// import { useHistory } from \"react-router\";\n// import Login from \"../components/Authentication/Login\";\n// import Signup from \"../components/Authentication/Signup\";\n\n// function Homepage() {\n//   const history = useHistory();\n\n//   useEffect(() => {\n//     const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n//     if (user) history.push(\"/chats\");\n//   }, [history]);\n\n//   return (\n//     <Container maxW=\"xl\" centerContent>\n//       <Box\n//         d=\"flex\"\n//         justifyContent=\"center\"\n//         p={3}\n//         bg=\"white\"\n//         w=\"100%\"\n//         m=\"40px 0 15px 0\"\n//         borderRadius=\"lg\"\n//         borderWidth=\"1px\"\n//       >\n//         {/* <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n//           ChatBeSideYou\n//         </Text> */}\n//         <Text \n//   fontSize=\"4xl\" \n//   fontFamily=\"Arial\"  // Changed font family\n//   fontWeight=\"bold\"  // Makes the text bolder\n//   letterSpacing=\"wide\"  // Adds space between the letters\n// >\n//   ChatBeSideYou\n// </Text>\n\n//       </Box>\n//       <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n//         <Tabs isFitted variant=\"soft-rounded\">\n//           <TabList mb=\"1em\">\n//             <Tab>Login</Tab>\n//             <Tab>Sign Up</Tab>\n//           </TabList>\n//           <TabPanels>\n//             <TabPanel>\n//               <Login />\n//             </TabPanel>\n//             <TabPanel>\n//               <Signup />\n//             </TabPanel>\n//           </TabPanels>\n//         </Tabs>\n//       </Box>\n//     </Container>\n//   );\n// }\n\n// export default Homepage;/\n\n\n\nimport {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        // bg=\"gray.800\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n        box-shadow=\"gba(50, 50, 93,0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px\"\n        bg=\"#3A6D8C\"\n        \n      >\n        <Text \n          fontSize=\"4xl\" \n          fontFamily=\"Arial\"  // Changed font family\n          fontWeight=\"bold\"   // Makes the text bolder\n          letterSpacing=\"wide\"  // Adds space between the letters\n          // color=\"white\"   // Light gray color for the text\n          color= \"white\"\n        >\n          ChatBesideYou\n        </Text>\n      </Box>\n      <Box w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\"\n        box-shadow=\"rgba(240, 46, 170, 0.4) -5px 5px, rgba(240, 46, 170, 0.3) -10px 10px, rgba(240, 46, 170, 0.2) -15px 15px, rgba(240, 46, 170, 0.1) -20px 20px, rgba(240, 46, 170, 0.05) -25px 25px\"\n        // bg=\"rgb(121,101,9)\"//\n        bg=\"linear-gradient(90deg, rgba(121,101,9,1) 0%, rgba(121,101,9,1) 3%, rgba(0,212,255,1) 71%, rgba(2,0,36,1) 100%)\"\n          >\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab color=\"white\">Login</Tab>\n            <Tab color=\"white\">Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      color=\"#3A6D8C\"\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Talk-A-Tive\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}